{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenido a la p\u00e1gina de Guille Mi p\u00e1gina de Github . Project layout En esta p\u00e1gina puedes encontrar ma\u015b informaci\u00f3n sobre mis proyectos.","title":"Bienvenido a la p\u00e1gina de Guille"},{"location":"#bienvenido-a-la-pagina-de-guille","text":"Mi p\u00e1gina de Github .","title":"Bienvenido a la p\u00e1gina de Guille"},{"location":"#project-layout","text":"En esta p\u00e1gina puedes encontrar ma\u015b informaci\u00f3n sobre mis proyectos.","title":"Project layout"},{"location":"prac8/","text":"Balanceador de carga con Apache \u00cdndice 1. Introducci\u00f3n 2. Estructura 3. Creaci\u00f3n y configuraci\u00f3n de la instancia 4. Instalaci\u00f3n del repositorio 5. Conclusi\u00f3n Introducci\u00f3n Esta pr\u00e1ctica consiste en la instalaci\u00f3n automatizada mediante Ansible de una aplicaci\u00f3n web LAMP como en la pr\u00e1ctica 7 pero con cuatro m\u00e1quinas EC2 realizando un balanceo de carga entre Frontends para redirigir el tr\u00e1fico. Un balanceador de carga es un dispositivo hardware o software que se pone al frente de un conjunto de servidores y se encarga de asignar o balancear las peticiones que llegan de los clientes hacia los servidores. Ejemplos de balanceadores de carga hardware: F5 BIG-IP. Kemp LoadMaster. Ejemplos de balanceadoes de carga software: HAProxy. Nginx. Apache HTTP Server. Estos dispositivos permiten distribuir el tr\u00e1fico de red entre varios servidores o dispositivos de red, con el fin de mejorar el rendimiento y la disponibilidad de un sistema o aplicaci\u00f3n. Un proxy inverso es un tipo de servidor proxy que hace de intermediario entre un cliente y uno o m\u00e1s servidores. El cliente realiza las peticiones a los servidores a trav\u00e9s del proxy inverso y las respuestas de los servidores hacia el cliente tambi\u00e9n se env\u00edan a trav\u00e9s del proxy inverso. El objetivo de esta pr\u00e1ctica es crear una arquitectura de alta disponibilidad que sea escalable y redundante, de modo que podamos balancear la carga entre todos los frontales web. Estructura La estructura de esta pr\u00e1ctica se divide en cuatro m\u00e1quinas (EC2). - Una m\u00e1quina que har\u00e1 de Balanceador . - Una m\u00e1quina que har\u00e1 de Backend . - Dos m\u00e1quinas que har\u00e1n de Frontend . Por otro lado, necesitamos un equipo , ya sea local o m\u00e1quina EC2 que ser\u00e1 el Launcher desde el que instalaremos ansible para ejecutar los playbooks en las m\u00e1quinas Como realizaremos la instalaci\u00f3n en Ansible, solo tendremos que tener en cuenta el archivo inventario del repositorio en el que declararemos las IP de las m\u00e1quinas que actuar\u00e1n como Frontend y backend. Tambi\u00e9n debemos de editar las variables para seleccionar las IP del backend y otras variables de configuraci\u00f3n de la base de datos. Creaci\u00f3n y configuraci\u00f3n de la instancia Crearemos dos instancias, ambas con Ubuntu 22.04 y 4 GB de RAM. Tendremos que fijarnos en que ambas tengan sus puertos correctamente abiertos en la configuraci\u00f3n inicial. IMPORTANTE - En la instancia de Backend debemos de abrir el puerto 3306 para aceptar conexiones MySQL al servidor que mantiene la base de datos. - Es importante que cambiemos las variables del script (archivo variables.yml) para determinar el dominio e Ips del backend entre otras funciones. - Por \u00faltimo, se debe cambiar las Ip del inventario. Descargaremos la vockey de nuestras m\u00e1quinas (vockey.pem) en nuestro Launcher o equipo local para declararla en nuestro inventario de conexiones de Ansible. En caso de usar m\u00e1quina como Launcher de ansible, podremos pasar la vockey con la siguiente sint\u00e1xis: scp username@b:/path/to/file /path/to/destination Instalaci\u00f3n del repositorio Una vez tengamos nuestra m\u00e1quina correctamente enlazada mediante Ansible (podemos hacer la prueba mediante ) ansible all -m ping Solo har\u00e1 falta ejecutar el playbook main.yml que instalar\u00e1 todo en el siguiente orden: 1. Instalaremos primero deploy_backend.yml que instalar\u00e1 las herramientas necesarias (MySQL junto a Python y sus m\u00f3dulos) y crear\u00e1 el usuario de la base de datos. 2. Luego instalar\u00e1 deploy_loadbalancer.yml que har\u00e1 el despliegue del balanceador de carga y el certificado de Certbot. 3. Instalaremos deploy_frontend.yml qu\u00e9 despliega la aplicaci\u00f3n web del repositorio de Jose Juan instalando todo lo necesario para ello y adem\u00e1s, exportando la base de datos al backend. Conclusi\u00f3n Ansible es realmente \u00fatil para manejar m\u00faltiples m\u00e1quinas y configurar e instalar herramientas conjuntas. Esta pr\u00e1ctica es una manera de acercarnos a la arquitectura en partes de las p\u00e1ginas webs m\u00e1s avanzadas para asegurarnos de no tener fallos de rendimiento o posibles ca\u00eddas en frontends. -Guille","title":"Balanceador de carga con Apache"},{"location":"prac8/#balanceador-de-carga-con-apache","text":"","title":"Balanceador de carga con Apache"},{"location":"prac8/#indice","text":"","title":"\u00cdndice"},{"location":"prac8/#1-introduccion","text":"","title":"1. Introducci\u00f3n"},{"location":"prac8/#2-estructura","text":"","title":"2. Estructura"},{"location":"prac8/#3-creacion-y-configuracion-de-la-instancia","text":"","title":"3. Creaci\u00f3n y configuraci\u00f3n de la instancia"},{"location":"prac8/#4-instalacion-del-repositorio","text":"","title":"4. Instalaci\u00f3n del repositorio"},{"location":"prac8/#5-conclusion","text":"","title":"5. Conclusi\u00f3n"},{"location":"prac8/#introduccion","text":"Esta pr\u00e1ctica consiste en la instalaci\u00f3n automatizada mediante Ansible de una aplicaci\u00f3n web LAMP como en la pr\u00e1ctica 7 pero con cuatro m\u00e1quinas EC2 realizando un balanceo de carga entre Frontends para redirigir el tr\u00e1fico. Un balanceador de carga es un dispositivo hardware o software que se pone al frente de un conjunto de servidores y se encarga de asignar o balancear las peticiones que llegan de los clientes hacia los servidores. Ejemplos de balanceadores de carga hardware: F5 BIG-IP. Kemp LoadMaster. Ejemplos de balanceadoes de carga software: HAProxy. Nginx. Apache HTTP Server. Estos dispositivos permiten distribuir el tr\u00e1fico de red entre varios servidores o dispositivos de red, con el fin de mejorar el rendimiento y la disponibilidad de un sistema o aplicaci\u00f3n. Un proxy inverso es un tipo de servidor proxy que hace de intermediario entre un cliente y uno o m\u00e1s servidores. El cliente realiza las peticiones a los servidores a trav\u00e9s del proxy inverso y las respuestas de los servidores hacia el cliente tambi\u00e9n se env\u00edan a trav\u00e9s del proxy inverso. El objetivo de esta pr\u00e1ctica es crear una arquitectura de alta disponibilidad que sea escalable y redundante, de modo que podamos balancear la carga entre todos los frontales web.","title":"Introducci\u00f3n"},{"location":"prac8/#estructura","text":"La estructura de esta pr\u00e1ctica se divide en cuatro m\u00e1quinas (EC2). - Una m\u00e1quina que har\u00e1 de Balanceador . - Una m\u00e1quina que har\u00e1 de Backend . - Dos m\u00e1quinas que har\u00e1n de Frontend . Por otro lado, necesitamos un equipo , ya sea local o m\u00e1quina EC2 que ser\u00e1 el Launcher desde el que instalaremos ansible para ejecutar los playbooks en las m\u00e1quinas Como realizaremos la instalaci\u00f3n en Ansible, solo tendremos que tener en cuenta el archivo inventario del repositorio en el que declararemos las IP de las m\u00e1quinas que actuar\u00e1n como Frontend y backend. Tambi\u00e9n debemos de editar las variables para seleccionar las IP del backend y otras variables de configuraci\u00f3n de la base de datos.","title":"Estructura"},{"location":"prac8/#creacion-y-configuracion-de-la-instancia","text":"Crearemos dos instancias, ambas con Ubuntu 22.04 y 4 GB de RAM. Tendremos que fijarnos en que ambas tengan sus puertos correctamente abiertos en la configuraci\u00f3n inicial. IMPORTANTE - En la instancia de Backend debemos de abrir el puerto 3306 para aceptar conexiones MySQL al servidor que mantiene la base de datos. - Es importante que cambiemos las variables del script (archivo variables.yml) para determinar el dominio e Ips del backend entre otras funciones. - Por \u00faltimo, se debe cambiar las Ip del inventario. Descargaremos la vockey de nuestras m\u00e1quinas (vockey.pem) en nuestro Launcher o equipo local para declararla en nuestro inventario de conexiones de Ansible. En caso de usar m\u00e1quina como Launcher de ansible, podremos pasar la vockey con la siguiente sint\u00e1xis: scp username@b:/path/to/file /path/to/destination","title":"Creaci\u00f3n y configuraci\u00f3n de la instancia"},{"location":"prac8/#instalacion-del-repositorio","text":"Una vez tengamos nuestra m\u00e1quina correctamente enlazada mediante Ansible (podemos hacer la prueba mediante ) ansible all -m ping Solo har\u00e1 falta ejecutar el playbook main.yml que instalar\u00e1 todo en el siguiente orden: 1. Instalaremos primero deploy_backend.yml que instalar\u00e1 las herramientas necesarias (MySQL junto a Python y sus m\u00f3dulos) y crear\u00e1 el usuario de la base de datos. 2. Luego instalar\u00e1 deploy_loadbalancer.yml que har\u00e1 el despliegue del balanceador de carga y el certificado de Certbot. 3. Instalaremos deploy_frontend.yml qu\u00e9 despliega la aplicaci\u00f3n web del repositorio de Jose Juan instalando todo lo necesario para ello y adem\u00e1s, exportando la base de datos al backend.","title":"Instalaci\u00f3n del repositorio"},{"location":"prac8/#conclusion","text":"Ansible es realmente \u00fatil para manejar m\u00faltiples m\u00e1quinas y configurar e instalar herramientas conjuntas. Esta pr\u00e1ctica es una manera de acercarnos a la arquitectura en partes de las p\u00e1ginas webs m\u00e1s avanzadas para asegurarnos de no tener fallos de rendimiento o posibles ca\u00eddas en frontends. -Guille","title":"Conclusi\u00f3n"},{"location":"prac9/","text":"Balanceador de carga con Apache \u00cdndice 1. Introducci\u00f3n 2. Estructura 3. Creaci\u00f3n y configuraci\u00f3n de la instancia 4. Funcionamiento del repositorio 5. Conclusi\u00f3n Introducci\u00f3n Esta pr\u00e1ctica consiste en una arquitectura web para desplegar Wordpress en 5 niveles. Para realizarla, he dividido la pr\u00e1ctica general en 3 fases: - Fase 0. - Instalaci\u00f3n de Wordpress en un nivel (Un \u00fanico servidor con todo lo necesario). - Fase 1. - Instalaci\u00f3n de Wordpress en dos niveles (Un servidor web y un servidor MySQL). - Fase 2. - Instalaci\u00f3n de Wordpress en tres niveles (Balanceador, 2 Servidores webs, Servidor NFS y Servidor MySQL). Se ha utilizado un servidor NFS para que los servidores de la capa de front-end compartan el directorio /var/www/html donde los sevidores web ser\u00e1n los clientes que utilizar\u00e1n el directorio compartido. Los dos equipos de frontend actuar\u00e1n como cliente (Ya a\u00f1adido en su script) Estructura La estructura de esta pr\u00e1ctica se divide en cinco m\u00e1quinas (EC2). - Una m\u00e1quina que har\u00e1 de Balanceador . - Una m\u00e1quina que har\u00e1 de Backend . - Dos m\u00e1quinas que har\u00e1n de Frontend . - Una m\u00e1quina que, formando parte del frontend, actuar\u00e1 como servidor NFS . Por otro lado, necesitamos un equipo , ya sea local o m\u00e1quina EC2 que ser\u00e1 el Launcher desde el que instalaremos ansible para ejecutar los playbooks en las m\u00e1quinas Como realizaremos la instalaci\u00f3n en Ansible, solo tendremos que tener en cuenta el archivo inventario del repositorio en el que declararemos las IP de las m\u00e1quinas que actuar\u00e1n como Frontend y backend. Tambi\u00e9n debemos de editar las variables para seleccionar las IP del backend y otras variables de configuraci\u00f3n de la base de datos. Creaci\u00f3n y configuraci\u00f3n de la instancia Crearemos cinco instancias, todas con Ubuntu 22.04 y 4 GB de RAM. Tendremos que fijarnos en que la m\u00e1quina de Backend tenga el puerto MySQL (3306 TCP) abierto y que el servidor NFS tenga el puerto NFS abierto (2049 TCP) IMPORTANTE Es importante que cambiemos las variables del script (archivo variables.yml) para determinar el dominio e Ips del backend entre otras funciones. Por \u00faltimo, se debe cambiar las Ip del inventario. Descargaremos la vockey de nuestras m\u00e1quinas (vockey.pem) en nuestro Launcher o equipo local para declararla en nuestro inventario de conexiones de Ansible. En caso de usar m\u00e1quina como Launcher de ansible, podremos pasar la vockey con la siguiente sint\u00e1xis: scp username@b:/path/to/file /path/to/destination Funcionamiento del repositorio Como he comentado anteriormente,la primera fase ( fase 0 ) es totalmente en local por lo que existen los siguientes playbooks: install_lamp.yml deploy_wordpress.yml install_certbot.yml En la fase 1 , de una manera m\u00e1s recogida, nos encontraremos los siguientes repositorios: deploy_backend.yml deploy_frontend.yml Esta fase recoge en solo dos playbooks una manera de hacer deploy de wordpress en un frontend y un backend como la pr\u00e1ctica 7. * Por \u00faltimo, la fase 2 har\u00e1 el deploy completo de la estructura en 3 niveles y de 5 m\u00e1quinas con los siguientes scripts: deploy_backend.yml deploy_loadbalancer.yml deploy_nfs.yml deploy_frontend.yml deploy_wordpress Con este mismo orden se ejecutar\u00e1 desde el main. Cada playbook tiene comentarios explicativos de las acciones realizdas pero, en resumen, la fase 2 comenzar\u00e1 instalando las herramientas b\u00e1sicas de MySQL y creando un usuario con una base de datos a la que se conectar\u00e1 el Frontend de Wordpress para guardar la informaci\u00f3n. El Loadbalancer configurar\u00e1 correctamente el flujo entre el frontend 1 y 2 gracias al m\u00f3dulo de Apache instalado y a las respectiva configuraci\u00f3n mediante IP privadas de los Frontend. Tambi\u00e9n instalar\u00e1 Certbot para poder conectarnos mediante HTTPS gracias al dominio especificado. El servidor NFS crear\u00e1 el directorio a compartir y cambiaremos el archivo /etc/exports para que el bloque de direcciones privadas de EC2 puedan usarlo. (/16) El playbook de deploy del frontend instalar\u00e1 Apache, php y los requisitos para funcionar, aparte de instalar tambi\u00e9n el cliente NFS creando la partici\u00f3n del mount. Por \u00faltimo, deploy_wordpress har\u00e1 una instalaci\u00f3n limpia cada vez que sea ejecutado de Wordpress corrigiendo todos los posibles errores que puedan existir como en las variables WP_HOME, WP_SITEURL o $_SERVER ['HTTPS'] = 'on' . Conclusi\u00f3n Ansible es realmente \u00fatil para manejar m\u00faltiples m\u00e1quinas y configurar e instalar herramientas conjuntas. Esta pr\u00e1ctica es una manera de acercarnos a la arquitectura en partes de las p\u00e1ginas webs m\u00e1s avanzadas para asegurarnos de no tener fallos de rendimiento o posibles ca\u00eddas en frontends. -Guille","title":"Balanceador de carga con Apache"},{"location":"prac9/#balanceador-de-carga-con-apache","text":"","title":"Balanceador de carga con Apache"},{"location":"prac9/#indice","text":"","title":"\u00cdndice"},{"location":"prac9/#1-introduccion","text":"","title":"1. Introducci\u00f3n"},{"location":"prac9/#2-estructura","text":"","title":"2. Estructura"},{"location":"prac9/#3-creacion-y-configuracion-de-la-instancia","text":"","title":"3. Creaci\u00f3n y configuraci\u00f3n de la instancia"},{"location":"prac9/#4-funcionamiento-del-repositorio","text":"","title":"4. Funcionamiento del repositorio"},{"location":"prac9/#5-conclusion","text":"","title":"5. Conclusi\u00f3n"},{"location":"prac9/#introduccion","text":"Esta pr\u00e1ctica consiste en una arquitectura web para desplegar Wordpress en 5 niveles. Para realizarla, he dividido la pr\u00e1ctica general en 3 fases: - Fase 0. - Instalaci\u00f3n de Wordpress en un nivel (Un \u00fanico servidor con todo lo necesario). - Fase 1. - Instalaci\u00f3n de Wordpress en dos niveles (Un servidor web y un servidor MySQL). - Fase 2. - Instalaci\u00f3n de Wordpress en tres niveles (Balanceador, 2 Servidores webs, Servidor NFS y Servidor MySQL). Se ha utilizado un servidor NFS para que los servidores de la capa de front-end compartan el directorio /var/www/html donde los sevidores web ser\u00e1n los clientes que utilizar\u00e1n el directorio compartido. Los dos equipos de frontend actuar\u00e1n como cliente (Ya a\u00f1adido en su script)","title":"Introducci\u00f3n"},{"location":"prac9/#estructura","text":"La estructura de esta pr\u00e1ctica se divide en cinco m\u00e1quinas (EC2). - Una m\u00e1quina que har\u00e1 de Balanceador . - Una m\u00e1quina que har\u00e1 de Backend . - Dos m\u00e1quinas que har\u00e1n de Frontend . - Una m\u00e1quina que, formando parte del frontend, actuar\u00e1 como servidor NFS . Por otro lado, necesitamos un equipo , ya sea local o m\u00e1quina EC2 que ser\u00e1 el Launcher desde el que instalaremos ansible para ejecutar los playbooks en las m\u00e1quinas Como realizaremos la instalaci\u00f3n en Ansible, solo tendremos que tener en cuenta el archivo inventario del repositorio en el que declararemos las IP de las m\u00e1quinas que actuar\u00e1n como Frontend y backend. Tambi\u00e9n debemos de editar las variables para seleccionar las IP del backend y otras variables de configuraci\u00f3n de la base de datos.","title":"Estructura"},{"location":"prac9/#creacion-y-configuracion-de-la-instancia","text":"Crearemos cinco instancias, todas con Ubuntu 22.04 y 4 GB de RAM.","title":"Creaci\u00f3n y configuraci\u00f3n de la instancia"},{"location":"prac9/#tendremos-que-fijarnos-en-que-la-maquina-de-backend-tenga-el-puerto-mysql-3306-tcp-abierto-y-que-el-servidor-nfs-tenga-el-puerto-nfs-abierto-2049-tcp","text":"IMPORTANTE Es importante que cambiemos las variables del script (archivo variables.yml) para determinar el dominio e Ips del backend entre otras funciones. Por \u00faltimo, se debe cambiar las Ip del inventario. Descargaremos la vockey de nuestras m\u00e1quinas (vockey.pem) en nuestro Launcher o equipo local para declararla en nuestro inventario de conexiones de Ansible. En caso de usar m\u00e1quina como Launcher de ansible, podremos pasar la vockey con la siguiente sint\u00e1xis: scp username@b:/path/to/file /path/to/destination","title":"Tendremos que fijarnos en que la m\u00e1quina de Backend tenga el puerto MySQL (3306 TCP) abierto y que el servidor NFS tenga el puerto NFS abierto (2049 TCP)"},{"location":"prac9/#funcionamiento-del-repositorio","text":"Como he comentado anteriormente,la primera fase ( fase 0 ) es totalmente en local por lo que existen los siguientes playbooks: install_lamp.yml deploy_wordpress.yml install_certbot.yml En la fase 1 , de una manera m\u00e1s recogida, nos encontraremos los siguientes repositorios: deploy_backend.yml deploy_frontend.yml Esta fase recoge en solo dos playbooks una manera de hacer deploy de wordpress en un frontend y un backend como la pr\u00e1ctica 7. * Por \u00faltimo, la fase 2 har\u00e1 el deploy completo de la estructura en 3 niveles y de 5 m\u00e1quinas con los siguientes scripts: deploy_backend.yml deploy_loadbalancer.yml deploy_nfs.yml deploy_frontend.yml deploy_wordpress Con este mismo orden se ejecutar\u00e1 desde el main. Cada playbook tiene comentarios explicativos de las acciones realizdas pero, en resumen, la fase 2 comenzar\u00e1 instalando las herramientas b\u00e1sicas de MySQL y creando un usuario con una base de datos a la que se conectar\u00e1 el Frontend de Wordpress para guardar la informaci\u00f3n. El Loadbalancer configurar\u00e1 correctamente el flujo entre el frontend 1 y 2 gracias al m\u00f3dulo de Apache instalado y a las respectiva configuraci\u00f3n mediante IP privadas de los Frontend. Tambi\u00e9n instalar\u00e1 Certbot para poder conectarnos mediante HTTPS gracias al dominio especificado. El servidor NFS crear\u00e1 el directorio a compartir y cambiaremos el archivo /etc/exports para que el bloque de direcciones privadas de EC2 puedan usarlo. (/16) El playbook de deploy del frontend instalar\u00e1 Apache, php y los requisitos para funcionar, aparte de instalar tambi\u00e9n el cliente NFS creando la partici\u00f3n del mount. Por \u00faltimo, deploy_wordpress har\u00e1 una instalaci\u00f3n limpia cada vez que sea ejecutado de Wordpress corrigiendo todos los posibles errores que puedan existir como en las variables WP_HOME, WP_SITEURL o $_SERVER ['HTTPS'] = 'on' .","title":"Funcionamiento del repositorio"},{"location":"prac9/#conclusion","text":"Ansible es realmente \u00fatil para manejar m\u00faltiples m\u00e1quinas y configurar e instalar herramientas conjuntas. Esta pr\u00e1ctica es una manera de acercarnos a la arquitectura en partes de las p\u00e1ginas webs m\u00e1s avanzadas para asegurarnos de no tener fallos de rendimiento o posibles ca\u00eddas en frontends. -Guille","title":"Conclusi\u00f3n"}]}